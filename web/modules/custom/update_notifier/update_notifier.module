<?php

/**
 * @file
 * Contains update_notifier.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function update_notifier_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the update_notifier module.
    case 'help.page.update_notifier':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Allow users to follow/unfollow products.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_entity_view_alter().
 *
 */
function update_notifier_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {

  $user = \Drupal::currentUser();
  /** @var \Drupal\update_notifier\UpdateNotifierContainerInterface $container */
  $container = \Drupal::getContainer()->get('update_notifier.update_notifier_container');

  // Only allow authenticated users to follow products.
  if ($user->isAuthenticated()) {

    $product = $entity->getEntityTypeId();

    $user_id = $user->id();

    if ($product == 'commerce_product') {

      // Check if user is already following product
      /** @var \Drupal\commerce_product\Entity\ProductInterface $product_followed */
      $product_followed = $entity;
      $is_following = $container->isFollowing($user, $product_followed);
      if ($is_following) {
        $follow_button_text = 'Unfollow';
        $route = 'update_notifier.unfollow_link';
      }
      else {
        $follow_button_text = 'Follow';
        $route = 'update_notifier.follow_link';
      }

      $product_id = $entity->id();

      $build['follow_link'] = [
        '#theme' => 'follow_link',
        '#product' => $product_id,
        '#user' => $user_id,
        '#follow_button_text' => $follow_button_text,
        '#route' => $route,
        '#link_class' => 'follow_link_product',
        '#weight' => 11,
      ];

    }
    elseif($product == 'commerce_product_variation') {

      /** @var \Drupal\commerce_product\Entity\ProductVariationInterface $product_variation */
      $product_variation = $entity;
      // Check if user is following parent product
      /** @var \Drupal\commerce_product\Entity\ProductInterface $product_followed */
      $product_followed = $product_variation->getProduct();
      $is_following = $container->isFollowing($user, $product_followed);
      if ($is_following) {
        $follow_button_text = 'Unfollow';
        $route = 'update_notifier.unfollow_link';
      }
      else {
        $follow_button_text = 'Follow';
        $route = 'update_notifier.follow_link';
      }

      $product_id = $product_followed->id();

      $build['follow_link'] = [
        '#theme' => 'follow_link',
        '#product' => $product_id,
        '#user' => $user_id,
        '#follow_button_text' => $follow_button_text,
        '#route' => $route,
        '#link_class' => 'follow_link_product_variation',
        '#weight' => 2,
      ];

    }
  }

}

/**
 * Implements hook_theme().
 */
function update_notifier_theme($existing, $type, $theme, $path) {

    return [
      'update_notifier_user' => [
        'template' => 'update-notifier-user',
      ],
      'update_notifier' => [
        'render element' => 'children',
      ],
      'follow_link' => [
        'variables' => [
          'route' => NULL,
          'user' => NULL,
          'product' => NULL,
          'follow_button_text' => NULL,
          'link_class' => NULL,
        ],
      ],
      'update_notifier_email_template' => [
        'variables' => [
          'product' => NULL,
          'route' => NULL,
          'user' => NULL,
          'unfollow_link' => NULL,
          'notifications' => NULL,
          'site_name' => NULL,
          'email_message' => NULL,
        ],
      ],
    ];

}

/**
 * Prepares variables for update-notifier-user template.
 *
 * Default template: update-notifier-user.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - products: An array of products being followed by the current user.
 */
function template_preprocess_update_notifier_user(&$variables) {
  /** @var \Drupal\update_notifier\UpdateNotifierContainerInterface $container */
  $container = \Drupal::getContainer()->get('update_notifier.update_notifier_container');
  $products = $container->userUpdateNotifierEntity(\Drupal::currentUser());
  $variables['products'] = [];

  foreach ($products as $product) {
    $variables['products'][$product->getProductFollowed()->id()] = [
      'product' => $product->getProductFollowed(),
      'product_id' => $product->getProductFollowed()->id(),
      'product_link' => $product->getProductFollowed()->toLink(),
      'edit_notifications_form' => 'entity.update_notifier_entity.edit_form',
      'update_notifier_entity' => $product->id(),
      'unfollow_form' => 'update_notifier.unfollow_link',
    ];
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function update_notifier_theme_suggestions_user_alter(array &$suggestions, array $variables) {
  $suggestions = [];

  $suggestions[] = 'update_notifier_user';

  return $suggestions;
}

/**
 * Implements hook_mail().
 *
 * Captures the outgoing mail and sets appropriate message body and headers.
 */
function update_notifier_mail($key, &$message, $params) {
  if (isset($params['headers'])) {
    $message['headers'] = array_merge($message['headers'], $params['headers']);
  }

  $message['from'] = $params['from'];
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
